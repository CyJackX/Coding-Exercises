#Interesting challenge compared to the freeCodeCamp one
# But also Python has more interesting tools.
from itertools import combinations
from itertools import permutations
from collections import defaultdict
import cProfile

# def buildNGons2(N, allTriplets):
#     def buildNGon(N, nGon, remaining):

#         #Base Case, last case
#         if len(nGon)/3 == N - 1:
#             finalTriplets = [x for x in remaining if x[1] == nGon[-1] and x[0] not in nGon and x[2] == nGon[1]]
#             for triplet in finalTriplets:
#                 nGons.append("".join(map(str, nGon + triplet)))
#             return

#         #Filter remaining Triplets possible
#         eligibleTriplets = [x for x in remaining if x[1] == nGon[-1] and x[0] not in nGon and x[2] not in nGon]

#         for triplet in eligibleTriplets:
#             newGon = nGon + triplet
#             buildNGon(N, newGon, [x for x in remaining if x[0] not in nGon])

#     nGons = []

#     for i in range(len(allTriplets)):
#         triplet = allTriplets[i]
#         buildNGon(N, triplet, [x for x in allTriplets[i+1:] if x[0] not in triplet])
    
#     return nGons

def buildNGons(N, dicts):
    def buildNGon(nGon):
        nGonSet = set(nGon)

        #Base Case, last case
        if len(nGon) / 3 == N - 1:

            finalTriplets = [x for x in dicts[nGon[-3:]] if x[2] == nGon[1] and x[1] == nGon[-1] and x[0] not in nGonSet and x > nGon[0:3]]
            for triplet in finalTriplets:
                nGons.append("".join(map(str, nGon + triplet)))
            return

        #Second Filter
        eligibleTriplets = [x for x in dicts[nGon[-3:]] if x[1] == nGon[-1] and x[0] not in nGonSet and x[2] not in nGonSet and x > nGon[0:3]]

        for triplet in eligibleTriplets:
            newGon = nGon + triplet
            buildNGon(newGon)

    nGons = []

    for triplet in dicts.keys():
        buildNGon(triplet)
    
    return nGons


def buildDict(allTriplets):
    answer = {}
    for p1 in allTriplets:
        answer[p1] = set()
        for p2 in allTriplets:
            if p2[0] not in p1 and p2[1] == p1[2] and p2[2] not in p1:
                answer[p1].add(p2)
    return answer

NK = [10, 30]
# NK = [3,9]
# NK = input().split(' ')    

N = int(NK[0])
S = int(NK[1])
profiler = cProfile.Profile()
profiler.enable()

#All numbers possible
cells = [i for i in range(1,2*N + 1)]

#All triplets of those numbers
allTriplets = list(permutations(cells,3))

#Filter not equal to S
allTriplets = [x for x in allTriplets if sum(x) == S]

#Build dictionary of triplets and eligible following triplets
dictnGons = buildDict(allTriplets)
dictnGons = dict(sorted(dictnGons.items()))


nGons = buildNGons(N,dictnGons)
# nGons = buildNGons2(N, allTriplets)
nGons.sort()
print("\n".join(nGons))

profiler.disable()
profiler.print_stats(sort="cumulative")

# print(allTriplets)