# 10**12?  That's crazy.
# How the heck am I supposed to test these values without an array leading up to N?
# I guess I don't need all the primes, just the primes that add up to N...
# Still stalling out getting primes that add up to N for 10**8.
# Gonna have to try a different way...
# Need to mod my original js answer to accept an array of inputs, save the results and use them for the next one.
# Damn, I didn't think about needing to NOT sort them... maybe that's it.

# Modded it to start with the largest 2 chain and work from there
# Now I'm getting a wrong answer somewhere?
# Wow, everything but testcase 3 :/

def longestConsecutivePrimes(elements):

    for elem in elements:
        if elem == 2:
            print(2, 0)
            continue

        #Start with biggest first link and go from there
        chainLength = 0
        candidate = 0
        chainMax = 0
        winner = 0

        #Find largest 2-chain first.
        while candidate <= elem:            
            candidate += primes[chainLength]
            chainLength+=1            

        while not isPrime(candidate) or candidate > elem:
            chainLength -= 1
            candidate -= primes[chainLength]

        start = 0

        # While the potential for a new chain is possible
        while candidate <= elem:              

            # While the current chain hasn't gone past max
            while candidate <= elem:
                if isPrime(candidate):
                    chainMax = chainLength
                    winner = candidate

                candidate += primes[start + chainLength]
                chainLength += 1
                

            #Restart Loop from next prime
            start += 1
            chainLength = chainMax + 1
            candidate = sum(primes[start:start + chainLength])
               
        print(winner, chainMax)

def isPrime(n):
    if n < 2:
        return False
    if n == 2:
        return True
    for prime in primes:
        if n % prime == 0:
            return False
        if prime**2 > n:
            return True

def sieve(N):
    primes = [True for i in range(N+1)]
    p = 2
    while p**2 <= N:
        if primes[p]:
            for i in range(p**2, N+1, p):
                primes[i] = False
        p += 1

    prime_nums = [p for p in range(2, N) if primes[p]]
    return prime_nums

def limitedSegmentedSieve(N):
    limit = int(N**.5)+1
    start = limit
    end = start * 2
    primes = sieve(start)
    length = len(primes)

    #special Sum limit
    sumPrimes = sum(primes)

    while start <= N:
        mark = [True for i in range(start+1)]
        for i in range(length):
            loLim = int((start/primes[i])) * primes[i]
            if loLim < start:
                loLim += primes[i]
            for j in range(loLim, end, primes[i]):
                mark[j-start] = False

        for i in range(start, end):
            if mark[i-start] == True:
                primes.append(i)
                sumPrimes+=i
                if(sumPrimes > N):
                    return primes
        
        start += limit
        end += limit
    return primes

# n = int(input())
# elements = [int(input()) for _ in range(n)]
elements = [10**12, 1000, 2, 50, 100,10**6]
primes = limitedSegmentedSieve(max(elements))
longestConsecutivePrimes(elements)