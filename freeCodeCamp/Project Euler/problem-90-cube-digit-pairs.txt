/*
Problem 90: Cube digit pairs
Each of the six faces on a cube has a different digit (0 to 9) written on it; the same is done to a second cube. By placing the two cubes side-by-side in different positions we can form a variety of 2-digit numbers.

For example, the square number 64 could be formed:

two cubes, one with the number 6 and the other with number 4
In fact, by carefully choosing the digits on both cubes it is possible to display all of the square numbers below one-hundred: 01, 04, 09, 16, 25, 36, 49, 64, and 81.

For example, one way this can be achieved is by placing {0, 5, 6, 7, 8, 9} on one cube and {1, 2, 3, 4, 8, 9} on the other cube.

However, for this problem we shall allow the 6 or 9 to be turned upside-down so that an arrangement like {0, 5, 6, 7, 8, 9} and {1, 2, 3, 4, 6, 7} allows for all nine square numbers to be displayed; otherwise it would be impossible to obtain 09.

In determining a distinct arrangement we are interested in the digits on each cube, not the order.

{1, 2, 3, 4, 5, 6} is equivalent to {3, 6, 4, 1, 2, 5}
{1, 2, 3, 4, 5, 6} is distinct from {1, 2, 3, 4, 5, 9}
But because we are allowing 6 and 9 to be reversed, the two distinct sets in the last example both represent the extended set {1, 2, 3, 4, 5, 6, 9} for the purpose of forming 2-digit numbers.

How many distinct arrangements of the two cubes allow for all of the square numbers to be displayed?
--
This is a bit to digest.
Seems like a major combinatorics question
10 Choose 6 is only 210, doesn't seem that bad?
--
Gotten to the part where now I have to implement the 6/9 thing.  Undercounting now but I guess it'll increase if I change that.
Easy peezy.
*/
const digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
const test = [[0, 1], [0, 4], [0, 9], [1, 6], [2, 5], [3, 6], [4, 9], [6, 4], [8, 1]];

function cubeDigitPairs() {
  let count = 0;
  let sets = setOfSix(digits);
  for(let i = 0 ; i < sets.length ; i++){
    for(let j = i + 1 ; j < sets.length ; j++){
      if(pass(sets[i],sets[j])){
        //console.log(sets[i], sets[j]);
        count++;
      }
    }
  }
  console.log(count);
  return count;
}
//Checks if two sets of cubes pass the test
function pass(a, b) {
  [a,b].forEach(arr => {
    if(arr.includes(6)) arr.push(9);
    if(arr.includes(9)) arr.push(6);
  })
  for (let square of test) {
    if (!(a.includes(square[0]) && b.includes(square[1]) ||
      b.includes(square[0]) && a.includes(square[1]))) {
      return false
    }
  }
  return true
}
//Returns all sets of 6 from the 10 digits, recursive
function setOfSix(optionsRemaining, index = 0) {

  if (optionsRemaining.length == 4) {
    return [[]];
  }

  let arr = [];
  for (let i = index; i < optionsRemaining.length; i++) {
    let digit = optionsRemaining[i];
    let nextArr = [...optionsRemaining]
    nextArr.splice(i, 1);
    let results = setOfSix(nextArr, i);
    for (let result of results) {
      arr.push([digit, ...result]);
    }
  }
  return arr;
}


//console.log(setOfSix(digits));

cubeDigitPairs();