//Ideating on the algorithm
//Recursive search doesn't work, it takes too long...
//Need to find out how to trim the tree!  Work from the bottom?

//I got it!  Delete the last row, add the max value to the row above it!  Essentially collapse all the bottom triangles into the row above, repeat etc. etc....
function maximumPathSumII(triangle) {
  while(triangle.length > 1){
    let row = triangle.length - 2;
    for(let i = 0 ; i <= row ; i++){
      triangle[row][i] += Math.max(triangle[row+1][i], triangle[row+1][i+1]);
    }
    triangle.pop();
  }
  return triangle[0][0];
}

const testTriangle = [[3, 0, 0, 0],
                      [7, 4, 0, 0],
                      [2, 4, 6, 0],
                      [8, 5, 9, 3]];

maximumPathSumII(testTriangle);