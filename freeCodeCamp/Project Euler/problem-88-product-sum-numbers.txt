/*
Problem 88: Product-sum numbers
A natural number, N, that can be written as the sum and product of a given set of at least two natural numbers,  {a1,a2,…,ak}
  is called a product-sum number:  N=a1+a2+⋯+ak=a1×a2×⋯×ak
 .

For example, 6 = 1 + 2 + 3 = 1 × 2 × 3.

For a given set of size, k, we shall call the smallest N with this property a minimal product-sum number. The minimal product-sum numbers for sets of size, k = 2, 3, 4, 5, and 6 are as follows.

k=2: 4 = 2 × 2 = 2 + 2
k=3: 6 = 1 × 2 × 3 = 1 + 2 + 3
k=4: 8 = 1 × 1 × 2 × 4 = 1 + 1 + 2 + 4
k=5: 8 = 1 × 1 × 2 × 2 × 2 = 1 + 1 + 2 + 2 + 2
k=6: 12 = 1 × 1 × 1 × 1 × 2 × 6 = 1 + 1 + 1 + 1 + 2 + 6

Hence for 2 ≤ k ≤ 6, the sum of all the minimal product-sum numbers is 4 + 6 + 8 + 12 = 30; note that 8 is only counted once in the sum.

In fact, as the complete set of minimal product-sum numbers for 2 ≤ k ≤ 12 is  {4,6,8,12,15,16}
 , the sum is 61.

What is the sum of all the minimal product-sum numbers for 2 ≤ k ≤ limit?
--
This seems pretty tricky!  But so far I can grok that the solution lies in factoring a number...then maybe testing every combination of its factors and seeing if any of those sum to a compatible amount?
--
Getting every set of possible divisors for a number is...eh? Whacky?  Every nCr of combinations, I suppose.  I just don't want to go off the rails when something is easier than it looks...
--
Okay, I independently came up with the idea of bitmasking apparently, the idea of bits to create all combinations made sense to me since it was on/off for each element...
--
Got bitmasking implemented, now for the main loop, I think, just testing, incrementing, and only adding the number once, and I think it ALWAYS goes up?
--
Not getting the right answers after the first test case, might have to test from N everytime?
It does not seem monotonic!
And I'm definitely going to have to do a dynamic version.  I think I can grok how each N has multiple ks it can satisfy, so update a big array of those.
--
Maybe it's non-monotonicity is a bug
--
Yeah, 16 is the first issue...4x4 doesn't get picked up by my algorithm.  Combining factors twice...damn!  Can't imagine thrice? Ugh...
--
I guess I need a recursive version.
--
Okay!  The algorithm works, now it just times out on the last 2.  Now to add some dynamic programming with an array to do some optimizations!
--
Since there are no duplicate N's allowed in the sum anyway, I ought to instead check thru N's, and, if they satisfy ANY k under the limit, add them to the array.  That seems straightforward enough?
--
Weird, it works for N = 6000 but not 300 or 12000... But fast!
--
Ah, I see.  Assigning values to arr[k] beyond the limit extends the array.  Didn't know that!
--
Success!  Kept me up a few nights on the divisorCombinations, but it all works.
*/
function productSumNumbers(limit) {
  //Create an array, and we're going to fill every k for each N until we fill it all up.
  let arr = Array.from({ length: limit + 1 });
  arr[0] = arr[1] = 0; //du

  for (let N = 4; arr.some(x => x == undefined); N++) {
    let factorSets = divisorCombinations(N).slice(1); //slice 1 to remove the N value.
    for (let factorSet of factorSets) {
      let k = N - sum(factorSet) + factorSet.length;
      if(!arr[k] && k < arr.length){
        arr[k] = N;
        //console.log("k=" + k + ": " + N);
      }

      //Debugging
      // let l = factorSet.length;
      // for (let i = 0; i < k - l; i++) {
      //   factorSet.unshift(1);
      // }
      // console.log("k=" + k + ": " + N + " = " +
      //   factorSet.join('x') + " = " +
      //   factorSet.join('+'));
      
    }
  }
  //console.log(arr);
  let answer = sum(Array.from(new Set(arr)));
  console.log(answer);
  return answer;
}

////This version times out
// function productSumNumbers(limit) {
//   let Ns = new Set();

//   let candidates = [];
//   let newN = true;
//   for (let k = 2; k <= limit; k++) {
//     //Loop higher until you find an appropriate N
//     //Keep the candidates array until it doesnt work
//     let N = 3;
//     while (!candidates.some((factorSet) => k - factorSet.length + sum(factorSet) == N)) {
//       N++
//       candidates = divisorCombinations(N);
//     }
//     for(let factorSet of candidates){
//       if(k - factorSet.length + sum(factorSet) == N){
//         let l = factorSet.length;
//         for(let i = 0 ; i < k - l ; i++){
//           factorSet.unshift(1);
//         }
//          console.log("k=" + k +": " + N + " = " + 
//          factorSet.join('x') + " = " + 
//          factorSet.join('+'));
//       }
//     }
//     Ns.add(N);
//   }
//   let answer = sum(Array.from(Ns));
//   console.log(answer);
//   return answer;
// }

function prod(arr) {
  return arr.reduce((prod, x) => prod * x, 1);
}

function sum(arr) {
  return arr.reduce((sum, x) => sum + x, 0);
}

// function factors(n) {
//   let arr = [];
//   while (n % 2 == 0) {
//     arr.push(2);
//     n /= 2;
//   }
//   for (let d = 3; n > 1; d += 2) {
//     while (n % d == 0) {
//       arr.push(d)
//       n /= d;
//     }
//   }  
//   return arr;
// }

//console.log(divisorCombinations(2**6*9));

//I think this one works!  and not too complicated for a recursive function.
function divisorCombinations(n, index = 2) {
  let arr = [[n]];
  for (let i = index; i * i <= n; i++) {
    if (n % i == 0) {
      //console.log(n,n/i);
      let tempSet = [];
      for (let factorSet of divisorCombinations(n / i, i)) {
        tempSet.push([i, ...factorSet]);
      }
      arr.push(...tempSet);
    }
  }
  return arr;
}
// //Old version, wrong.
// function factorCombinations(arr) {
//   let sets = [];
//   for (let i = 1; i < 2 ** arr.length - 1; i++) {
//     let binary = i.toString(2).padStart(arr.length, '0');
//     let subset = arr.filter((_, idx) => binary[idx] == 1);
//     let nonset = arr.reduce((prod, factor, idx) => {
//       if (binary[idx] == 0) {
//         prod *= factor;
//       }
//       return prod
//     }, 1);
//     //console.log(subset,nonset);
//     sets.push([...subset, nonset].sort());
//   }

//   sets = Array.from(new Set(sets.map(JSON.stringify)), JSON.parse);
//   console.log(sets);
//   return sets;
// }
productSumNumbers(300);

//console.log(factorCombinations(factors(240)));