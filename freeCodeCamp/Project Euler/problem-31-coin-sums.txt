//Like other branching tree structures, this seems most efficient if done from the bottom, since every coin can be replaced by the same combination of previous coins, etc...5p will always be replaceable by the same combinations of 1p or 2p, so it makes more sense to internalize that somehow everytime we need 5p?
/*
coinsum(1) = 1;
coinsum(2) = 2;
coinsum(3) = 2;
coinsum(4) = 3; (1111,112,22)
coinsum(5) = 4; (5,221,2111,11111)
coinsum(10) = 11(10,55,5221,52111,511111,22222,222211,2221111,22111111,211111111,11111111)
1,0,0,0
0,2,0,0
0,1,2,1
0,1,1,3
0,1,0,5
0,0,5,0
0,0,4,2
0,0,3,4
0,0,2,6
0,0,1,8
0,0,0,10
 */
const coins = [200,100,50,20,10,5,2,1];
function coinSums(n) {

  let arr = [0,0,0,0,0,0,0,0]; //Prime the first set
  makeChange(arr, n);
  
  
  let count = 1;
  console.log(arr);
  while(arr[7] != n){
    
    count++;
    for(let i = 6 ; i >= 0 ; i--){
      if(arr[i] == 0){
        continue;
      }
      arr[i]--;
      makeChange(arr, coins[i], i + 1);
      break;
    }
    //console.log(arr);
  }  

  return count;
}

function makeChange(arr, total, start = 0){
  for(let i = start ; i < coins.length ; i++){
    total+=arr[i]*coins[i];
    arr[i] = 0;
  }
  for(let i = start ; i < coins.length ; i++){
    while(total >= coins[i]){
      total-=coins[i]
      arr[i]++;
    }
  }
}

console.log(coinSums(50));